generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                   BigInt     @id @default(autoincrement())
  Name                 String
  Created_At           DateTime   @default(now())
  Max_User             Int
  Suspscription_package String
  Sub_end_time         DateTime

  users                User[]
  invites              Invite[]
  categories           Categories[]
  products             Products[]
  customers            Customers[]
  orders               Orders[]

  @@map("companies")
}

model User {
  id           BigInt     @id @default(autoincrement())
  Name         String
  Mail         String     @unique
  password     String
  is_confirm   Boolean    @default(false)
  is_SuperAdmin Boolean   @default(false)
  is_active    Boolean    @default(true)
  created_at   DateTime   @default(now())

  company_id   BigInt
  company      Company    @relation(fields: [company_id], references: [id])

  permissions  Users_Permissions[]
  confirmTokens ConfirmToken[]
  refreshTokens RefreshToken[]
  responsibleSteps ProductSteps[]
  orderSteps   OrderSteps[]

  @@map("users")
}

model Permissions {
  id     BigInt     @id @default(autoincrement())
  Name   String
  Type   String

  users  Users_Permissions[]

  @@map("permissions")
}

model Users_Permissions {
  id            BigInt      @id @default(autoincrement())
  User_id       BigInt
  Permission_id BigInt

  user          User        @relation(fields: [User_id], references: [id])
  permission    Permissions @relation(fields: [Permission_id], references: [id])

  @@map("users_permissions")
}

model ConfirmToken {
  id        BigInt   @id @default(autoincrement())
  user_id   BigInt
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [user_id], references: [id])

  @@map("confirm_tokens")
}

model RefreshToken {
  id          BigInt   @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      BigInt
  tokenHash   String
  expiresAt   DateTime
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("refresh_tokens")
}

model Invite {
  id           BigInt   @id @default(autoincrement())
  Company_id   BigInt
  mail         String
  is_confirm   Boolean  @default(false)
  created_at   DateTime @default(now())
  invite_token String   @unique
  expires_at   DateTime

  company      Company  @relation(fields: [Company_id], references: [id])

  @@map("invites")
}

model Categories {
  id          BigInt    @id @default(autoincrement())
  Name        String
  Description String?
  Company_id  BigInt
  
  company     Company   @relation(fields: [Company_id], references: [id])
  products    Products[]
  
  @@map("categories")
}

model Products {
  id          BigInt     @id @default(autoincrement())
  name        String
  description String?
  Category_id BigInt
  Company_id  BigInt
  
  category    Categories @relation(fields: [Category_id], references: [id])
  company     Company    @relation(fields: [Company_id], references: [id])
  steps       ProductSteps[]
  orderSteps  OrderSteps[]
  
  @@map("products")
}

model ProductSteps {
  id              BigInt   @id @default(autoincrement())
  Name            String
  Description     String?
  Product_id      BigInt
  Step_number     Int
  Responsible_User BigInt?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  product         Products @relation(fields: [Product_id], references: [id], onDelete: Cascade)
  responsible     User?    @relation(fields: [Responsible_User], references: [id])
  
  @@map("product_steps")
  @@unique([Product_id, Step_number])
}

model Customers {
  id          BigInt    @id @default(autoincrement())
  Name        String
  Company_Id  BigInt
  Created_At  DateTime  @default(now())
  
  company     Company   @relation(fields: [Company_Id], references: [id])
  orders      Orders[]
  
  @@map("customers")
}

model Orders {
  id            BigInt      @id @default(autoincrement())
  order_number  String      @unique
  Customer_id   BigInt
  Company_id    BigInt
  status        OrderStatus @default(PENDING)
  priority      Priority    @default(NORMAL)
  deadline      DateTime?
  notes         String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  
  customer      Customers   @relation(fields: [Customer_id], references: [id])
  company       Company     @relation(fields: [Company_id], references: [id])
  orderSteps    OrderSteps[]
  
  @@map("orders")
}

model OrderSteps {
  id                BigInt      @id @default(autoincrement())
  Order_id          BigInt
  Product_id        BigInt
  step_name         String
  step_description  String?
  step_number       Int
  assigned_user     BigInt?
  status            StepStatus  @default(WAITING)
  started_at        DateTime?
  completed_at      DateTime?
  notes             String?
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  
  order             Orders      @relation(fields: [Order_id], references: [id], onDelete: Cascade)
  product           Products    @relation(fields: [Product_id], references: [id])
  assignedUser      User?       @relation(fields: [assigned_user], references: [id])
  
  @@map("order_steps")
  @@unique([Order_id, Product_id, step_number])
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum StepStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}
