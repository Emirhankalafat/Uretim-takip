generator client {
  provider = "prisma-client-js"
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  NEW_ORDER
  ORDER_STATUS_UPDATE
  TASK_ASSIGNED
  STOCK_ALERT
  GENERAL
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                    BigInt       @id @default(autoincrement())
  Name                  String
  Created_At            DateTime     @default(now())
  Max_User              Int
  Suspscription_package String
  Sub_end_time          DateTime
  categories            Categories[]
  customers             Customers[]
  invites               Invite[]
  orders                Orders[]
  products              Products[]
  users                 User[]
  api_key               String?

  @@map("companies")
}

model User {
  id                  BigInt               @id @default(autoincrement())
  Name                String
  Mail                String               @unique
  password            String
  is_confirm          Boolean              @default(false)
  is_SuperAdmin       Boolean              @default(false)
  is_active           Boolean              @default(true)
  company_id          BigInt
  created_at          DateTime             @default(now())
  systemLogs          SystemLog[]
  confirmTokens       ConfirmToken[]
  orderSteps          OrderSteps[]
  passwordResetTokens PasswordResetToken[]
  paymentLogs         PaymentLog[]
  responsibleSteps    ProductSteps[]
  refreshTokens       RefreshToken[]
  userCards           UserCard[]
  company             Company              @relation(fields: [company_id], references: [id])
  permissions         Users_Permissions[]
  notifications       Notification[]

  @@map("users")
}

model Permissions {
  id    BigInt              @id @default(autoincrement())
  Name  String              @unique(map: "unique_permission_name")
  Type  String
  users Users_Permissions[]

  @@map("permissions")
}

model Users_Permissions {
  id            BigInt      @id @default(autoincrement())
  User_id       BigInt
  Permission_id BigInt
  permission    Permissions @relation(fields: [Permission_id], references: [id])
  user          User        @relation(fields: [User_id], references: [id])

  @@map("users_permissions")
}

model ConfirmToken {
  id        BigInt   @id @default(autoincrement())
  user_id   BigInt
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id])

  @@map("confirm_tokens")
}

model RefreshToken {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  tokenHash String
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model PasswordResetToken {
  id        BigInt   @id @default(autoincrement())
  user_id   BigInt
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id])

  @@map("password_reset_tokens")
}

model Invite {
  id           BigInt   @id @default(autoincrement())
  Company_id   BigInt
  mail         String
  is_confirm   Boolean  @default(false)
  created_at   DateTime @default(now())
  invite_token String   @unique
  expires_at   DateTime
  company      Company  @relation(fields: [Company_id], references: [id])

  @@map("invites")
}

model Categories {
  id          BigInt     @id @default(autoincrement())
  Name        String
  Description String?
  Company_id  BigInt
  company     Company    @relation(fields: [Company_id], references: [id])
  products    Products[]

  @@map("categories")
}

model Products {
  id          BigInt         @id @default(autoincrement())
  name        String
  description String?
  Category_id BigInt
  Company_id  BigInt
  orderSteps  OrderSteps[]
  orderItems  OrderItems[]
  steps       ProductSteps[]
  category    Categories     @relation(fields: [Category_id], references: [id])
  company     Company        @relation(fields: [Company_id], references: [id])

  @@map("products")
}

model ProductSteps {
  id               BigInt   @id @default(autoincrement())
  Name             String
  Description      String?
  Product_id       BigInt
  Step_number      Int
  Responsible_User BigInt?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  product          Products @relation(fields: [Product_id], references: [id], onDelete: Cascade)
  responsible      User?    @relation(fields: [Responsible_User], references: [id])

  @@unique([Product_id, Step_number])
  @@map("product_steps")
}

model Customers {
  id         BigInt   @id @default(autoincrement())
  Name       String
  Company_Id BigInt
  Created_At DateTime @default(now())
  company    Company  @relation(fields: [Company_Id], references: [id])
  orders     Orders[]

  @@map("customers")
}

model Orders {
  id           BigInt       @id @default(autoincrement())
  order_number String       @unique
  Customer_id  BigInt?
  Company_id   BigInt
  status       OrderStatus  @default(PENDING)
  priority     Priority     @default(NORMAL)
  deadline     DateTime?
  notes        String?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  is_stock     Boolean      @default(false)
  orderSteps   OrderSteps[]
  orderItems   OrderItems[]
  company      Company      @relation(fields: [Company_id], references: [id])
  customer     Customers?   @relation(fields: [Customer_id], references: [id])

  @@map("orders")
}

model OrderSteps {
  id               BigInt     @id @default(autoincrement())
  Order_id         BigInt
  Product_id       BigInt
  step_name        String
  step_description String?
  step_number      Int
  assigned_user    BigInt?
  status           StepStatus @default(WAITING)
  started_at       DateTime?
  completed_at     DateTime?
  notes            String?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  order            Orders     @relation(fields: [Order_id], references: [id], onDelete: Cascade)
  product          Products   @relation(fields: [Product_id], references: [id])
  assignedUser     User?      @relation(fields: [assigned_user], references: [id])

  @@unique([Order_id, Product_id, step_number])
  @@map("order_steps")
}

model OrderItems {
  id         BigInt   @id @default(autoincrement())
  Order_id   BigInt
  Product_id BigInt
  quantity   Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order      Orders   @relation(fields: [Order_id], references: [id], onDelete: Cascade)
  product    Products @relation(fields: [Product_id], references: [id])

  @@unique([Order_id, Product_id])
  @@map("order_items")
}

model UserCard {
  id            BigInt   @id @default(autoincrement())
  user_id       BigInt
  card_user_key String
  card_token    String
  card_alias    String
  bin_number    String
  last_four     String
  card_type     String
  association   String?
  card_family   String?
  created_at    DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, card_token])
  @@map("user_cards")
}

model PaymentLog {
  id              BigInt   @id @default(autoincrement())
  user_id         BigInt
  conversation_id String
  price           Float
  currency        String   @default("TRY")
  status          String
  payment_id      String
  basket_id       String
  created_at      DateTime @default(now())
  error_message   String?
  user            User     @relation(fields: [user_id], references: [id])

  @@map("payment_logs")
}

model Notification {
  id        BigInt      @id @default(autoincrement())
  userId    BigInt
  message   String
  type      NotificationType @default(GENERAL)
  isRead    Boolean     @default(false)
  linkTo    String?     // Opsiyonel: Bildirime tıklandığında yönlendirilecek link (örn: /dashboard/orders/123)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemAdmin {
  id           BigInt   @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SystemLog {
  id         BigInt   @id @default(autoincrement())
  type       String
  message    String
  details    String?
  user_id    BigInt?
  endpoint   String?
  ip         String?
  stack      String?
  created_at DateTime @default(now())
  user       User?    @relation(fields: [user_id], references: [id])
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum StepStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}
